# notes dynamoDb table
notesTable:
  Type: AWS::DynamoDB::Table
  Properties:
    TableName: notesTable-${self:provider.stage}
    BillingMode: PAY_PER_REQUEST
    AttributeDefinitions:
      - AttributeName: notesId
        AttributeType: S
    KeySchema:
      - AttributeName: notesId
        KeyType: HASH

# Cognito user pool
myCognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties: 
    UserPoolName: MyNotesUP-${self:provider.stage}

# User pool web client
myCognitoUserPoolWebClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    UserPoolId: !Ref myCognitoUserPool
    ClientName: myWebClient
    AllowedOAuthFlowsUserPoolClient: true
    SupportedIdentityProviders:
      - COGNITO
    AllowedOAuthScopes:
      - phone
      - email
      - profile
      - openid
    AllowedOAuthFlows:
      - implicit
    CallbackURLs:
      - http://localhost:3000

# User pool domain
cognitoUserPoolDomain:
  Type: AWS::Cognito::UserPoolDomain
  Properties:
    UserPoolId: !Ref myCognitoUserPool
    Domain: my-notes-test-${self:provider.stage}

# Application parameters
userPoolArnParam:
  Type: AWS::SSM::Parameter
  Properties:
    Name: /notes/${self:provider.stage}/userPoolArn # this was introduced just for practice and not really used in our app
    Type: String
    Value: !GetAtt myCognitoUserPool.Arn